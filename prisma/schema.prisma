// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile management
model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String
  image           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            String          @default("user") // user, admin
  businessPlans   BusinessPlan[]
  conversations   Conversation[]
  strategicPlans  StrategicPlan[]
  marketingPlans  MarketingPlan[]
  progress        Progress[]
  
  // New relations for business coach features
  actionItems     ActionItemList[]
  businessNotes   BusinessNote[]
}

// Business Plan model with comprehensive JSON content structure
model BusinessPlan {
  id          String   @id @default(cuid())
  title       String
  status      String   @default("draft") // draft, completed
  content     Json     @default("{}")    // Stores the entire business plan structure
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Conversation model for storing chat history
model Conversation {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

// Message model for storing individual messages
model Message {
  id             String       @id @default(cuid())
  content        String
  role           String      // user, assistant
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
}

// Strategic Plan model
model StrategicPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json     // Stores the strategic plan structure
  status      String   @default("draft") // draft, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Marketing Plan model
model MarketingPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json     // Stores the marketing plan structure
  status      String   @default("draft") // draft, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Resource model for learning materials and templates
model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // article, template, guide, video
  content     String   // Could be URL or content depending on type
  category    String   // business-planning, marketing, operations, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Progress Tracking model
model Progress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // "businessPlan", "marketingPlan", etc.
  entityId    String   // ID of the entity the progress is for
  percentage  Int
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New models for business coach features
model ActionItemList {
  id        String   @id @default(cuid())
  title     String
  items     Json     // Stores the array of action items with structure: {id, title, description, priority, estimatedTimeInMinutes}
  itemNotes Json?    // Stores user notes for each item with structure: {itemId, note, dateAdded, completed}
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessNote {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  category  String   @default("general")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 