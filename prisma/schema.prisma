// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("user") // user, admin
  businessPlans BusinessPlan[]
  strategicPlans StrategicPlan[]
  marketingPlans MarketingPlan[]
  conversations Conversation[]
}

// Business Plan model with simplified JSON content structure
model BusinessPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json?    // Stores all plan content including executive summary, vision, etc.
  metadata    Json?    // Stores OpenAI thread IDs and other metadata
  status      String   @default("draft") // draft, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Conversation model for storing chat history
model Conversation {
  id        String    @id @default(cuid())
  title     String
  threadId  String?   // OpenAI thread ID for continuing conversations
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

// Message model for storing individual messages
model Message {
  id             String       @id @default(cuid())
  content        String
  role           String      // user, assistant
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
}

// Strategic Plan model
model StrategicPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json     // Stores the strategic plan structure
  status      String   @default("draft") // draft, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Marketing Plan model
model MarketingPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json     // Stores the marketing plan structure
  status      String   @default("draft") // draft, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Resource model for learning materials and templates
model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // article, template, guide, video
  content     String   // Could be URL or content depending on type
  category    String   // business-planning, marketing, operations, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Progress Tracking model
model Progress {
  id          String   @id @default(cuid())
  userId      String
  moduleType  String   // business-plan, strategic-plan, marketing-plan
  moduleId    String   // References the specific plan ID
  status      Int      // Percentage complete
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 