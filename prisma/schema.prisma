generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  password        String?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            String           @default("user")
  emailVerified   DateTime?
  accounts        Account[]
  actionItemTasks ActionItem[]
  actionItems     ActionItemList[]
  businessNotes   BusinessNote[]
  businessPlans   BusinessPlan[]
  conversations   Conversation[]
  marketingPlans  MarketingPlan[]
  progress        Progress[]
  sessions        Session[]
  strategicPlans  StrategicPlan[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BusinessPlan {
  id        String   @id @default(cuid())
  title     String
  content   Json     @default("{}")
  status    String   @default("draft")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String       @id @default(cuid())
  title       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  actionItems ActionItem[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String
  conversationId String
  createdAt      DateTime     @default(now())
  actionItems    ActionItem[]
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model StrategicPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MarketingPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  content     String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  entityId    String
  lastUpdated DateTime @default(now())
  percentage  Int
  type        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActionItemList {
  id          String           @id @default(cuid())
  title       String
  items       Json
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  itemNotes   Json?
  color       String?
  parentId    String?
  topicId     String?
  ordinal     Int              @default(0)
  actionItems ActionItem[]
  parent      ActionItemList?  @relation("ListHierarchy", fields: [parentId], references: [id])
  sublists    ActionItemList[] @relation("ListHierarchy")
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BusinessNote {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String   @default("general")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActionItem {
  id             String          @id @default(cuid())
  content        String
  isCompleted    Boolean         @default(false)
  notes          String?
  parentId       String?
  conversationId String?
  messageId      String?
  listId         String?
  ordinal        Int             @default(0)
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  conversation   Conversation?   @relation(fields: [conversationId], references: [id])
  list           ActionItemList? @relation(fields: [listId], references: [id])
  message        Message?        @relation(fields: [messageId], references: [id])
  parent         ActionItem?     @relation("ActionItemHierarchy", fields: [parentId], references: [id])
  children       ActionItem[]    @relation("ActionItemHierarchy")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}
